camera:
    type: perspective
    vanishing_point: [-.25, -.75] # slightly off-center viewing angle, towards lower-left of screen

layers:
    cycleway:
        filter: function (f) { return f.properties.highway == "cycleway"; }
        color:
            default: [.8, 0., 0.8]
        width:
            default: Style.pixels(5)

    bridges:
        filter: function (f) { return f.properties.is_bridge == "yes"; }
        color:
            default: [.0, 0.8, 0.8]
        width:
            default: Style.pixels(10)

    roads:
        # filter: function (f) { return f.properties.highway != "cycleway"; }
        # filter: function (f) { return f.properties.highway == "cycleway"; }
        color:
            default: [1., 1., 1.]
            # default: Style.color.pseudoRandomColor
            # default: Style.color.randomColor
        width:
            default: 2
            # highway: 20
            # major_road: 10
            # minor_road: 5
            # path: 1
            # cycleway: 10

    buildings:
        mode:
            name: buildings
        filter: function (f) { return f.properties.height > 5; }
        extrude:
            default: function (f, t) { return ((t.coords.z >= 15 && f.properties.height > 20) || t.coords.z >= 16) }

    earth:
        color: 
            default: [.5, .5, .5]

    landuse:
        color:
            default: [.6, .6, .6]

    water:
        color:
            default: [.4, .4, .4]

modes:
    buildings:
        extends: polygons
        shaders:
            defines:
                LIGHTING_DIRECTION: true
            uniforms:
                u_height: 0
                u_color_height: 0
            transforms:
                globals: |
                    uniform float u_height;
                    uniform float u_color_height;
                vertex: position.z *= u_height * .01;
                fragment: |
                    if (v_world_position.z > u_color_height) color = lighting * vec3(.8);
                    else color = lighting * vec3(.5);
