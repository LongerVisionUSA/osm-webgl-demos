camera:
    type: perspective
    vanishing_point: [-.25, -.75] # slightly off-center viewing angle, towards lower-left of screen

lighting:
    type: point

sources:
    osm:
        type: 'GeoJSONTileSource'
        url:  'http://vector.mapzen.com/osm/all/{z}/{x}/{y}.json'

styles:
    # note: consider this syntax as a special case for global mode settings
    # all:
    #     shaders:
    #         blocks:
    #             color: { url: shaders/spotlight.glsl }

    water:
        extends: polygons
        animated: true
        shaders:
            defines:
                EFFECT_NOISE_ANIMATED: true
            blocks:
                globals:
                    url: shaders/glsl-noise-periodic-3d.glsl
                color:
                    url: shaders/noise.glsl

    rainbow:
        extends: polygons
        animated: true
        shaders:
            blocks:
                globals: |
                    vec3 hsv2rgb(vec3 c) {
                        vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
                        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
                        return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
                    }
                color: |
                    vec3 c = vec3(v_world_position.z * .003 + u_time / 10., 1.0, 1.0);
                    color.rgb = hsv2rgb(c);


    elevator:
        extends: polygons
        animated: true
        shaders:
            blocks:
                vertex: position.z *= (sin(position.z + u_time) + 1.0); // elevator buildings
                # vertex: { url: shaders/elevator.glsl }

    breathe:
        url: styles/breathe.yaml

    popup:
        url: styles/popup.yaml

    dots:
        url: styles/dots.yaml

    wood:
        url: styles/wood.yaml

    envmap:
        extends: polygons
        shaders:
            defines:
                LIGHTING_ENVIRONMENT: true
            uniforms:
                u_env_map: images/LitSphere_test_02.jpg

    halftone:
        url: styles/halftone.yaml

    colorhalftone:
        url: styles/halftone.yaml

    windows:
        url: styles/windows.yaml

layers:
    earth:
        data:
            source: osm
            layer: earth
        style:
            order: 0
            color: [.3, .3, .3]

    landuse:
        data:
            source: osm
            layer: landuse
        style:
            interactive: true
            order: 1
            color: [.5, .9, 0.5]
            outline:
                color: [0, .7, 0]
                width: 2px
        pitch:
            filter: { kind: pitch }
            style:
                outline:
                    color: [0, 1, 0]


    water:
        data:
            source: osm
            layer: water
        style:
            interactive: true
            order: 2
            color: [.4, .4, .6]
        outline:
            style:
                color: [0.6, 0.6, 0.975]
                width: function () {
                        return (
                            zoom >= 16 &&
                            (feature.kind != 'ocean' && feature.kind != 'riverbank') &&
                            (2.5 * Math.log(zoom))
                        );
                    }

    roads:
        data:
            source: osm
            layer: roads
        style:
            interactive: function () { return (zoom >= 18); }
            color: [0.4, 0.4, 0.4]
            width: function () { return 2 * Math.log(zoom); }
            outline:
                color: [0.1, 0.7, 0.7]
                width: function () { return (zoom >= 18 && (2/8 * Math.log(zoom))); }
        major_road:
            filter: { kind: major_road }
            style:
                color: [0.5, 0.5, 0.5]
                width: function () { return 3 * Math.log(zoom); }
                outline:
                    width: function () { return (zoom >= 18 && (3/8 * Math.log(zoom))); }
        minor_road:
            filter: { kind: minor_road }
            style:
                color: [0.65, 0.65, 0.65]
                width: function () { return 2 * Math.log(zoom); }
                outline:
                    width: function () { return (zoom >= 18 && (2/8 * Math.log(zoom))); }
        path:
            filter: { kind: path }
            style:
                color: [0.8, 0.8, 0.8]
                width: function () { return 1 * Math.log(zoom); }
                outline:
                    width: function () { return (zoom >= 18 && (2/8 * Math.log(zoom))); }
        rail:
            filter: { kind: rail }
            style:
                color: [0.5, 0.0, 0.0]
                width: function () { return 2 * Math.log(zoom); }

    buildings:
        data:
            source: osm
            layer: buildings
        style:
            interactive: true
            order: 5
            color: function () { if (feature.name || feature.kind) { return [(feature.name && 0.6) || 0.2, 0.2, (feature.kind && 0.6) || 0.2]; } else { return [0.6, 0.6, 0.6] }; }
            extrude: function () { return ((zoom >= 15 && feature.height > 20) || zoom >= 16) }
